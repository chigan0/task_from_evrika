Тестовое задание

Описание: Сервер API (JSON HTTP API)
Средства разработки: Python
Framework: Django или Flask
База данных: MySQL
Протокол: HTTP, порт 80

Функционал (запросы):

Добавление нового пользователя.
Передаем на сервер персональные данные пользователя (имя пользователя, email и т.д.).
Сохраняем информацию в базе данных, генерируем jwt токен.
Ответ сервера - уникальный ID нового пользователя.

Получение информации о пользователе.
Передаем на сервер уникальный ID пользователя.
Читаем информацию из базы данных.
Ответ сервера - персональные данные пользователя (см. выше).

Изменение статуса пользователя (Online, Offline).
Передаем на сервер уникальный ID пользователя и новый статус (Online, Offline).
Изменяем статус пользователя.
Ответ сервера - уникальный ID пользователя, новый и предыдущий статус.

Разграничение по ролям (admin, user):
Добавление нового пользователя, Изменение статуса пользователя - только для admin
Получение информации о пользователе - для admin и user
Авторизация через jwt токен

Обязательные требования:

- RESTful.
- Все данные в формате JSON.
- Обработка ошибок.

Необязательные требования (желательно):

- Документирование кода.
- Тесты.
- DDD архитектура
- Реализация Json Api (https://jsonapi.org/)

Результат тестового задания:

- Результат тестового задания загрузить на github.com и с подробной инструкцией по его развертыванию. Приложить Dockerfile для сборки Docker контейнера для тестового задания. 
- Должен содержать краткую документацию созданного API (список запросов, параметры запросов, форматы запросов, форматы ответов и т.д.).
